// Objective-C API for talking to mixin/blockchain Go package.
//   gobind -lang=objc mixin/blockchain
//
// File is generated by gobind. Do not edit.

#ifndef __Blockchain_H__
#define __Blockchain_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class BlockchainKey;
@protocol BlockchainKeccakState;
@class BlockchainKeccakState;

@protocol BlockchainKeccakState <NSObject>
- (long)blockSize;
- (BOOL)read:(NSData* _Nullable)p0 ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (void)reset;
- (long)size;
- (NSData* _Nullable)sum:(NSData* _Nullable)b;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

@interface BlockchainKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSData* _Nullable privateKey;
@property (nonatomic) NSData* _Nullable chainCode;
@end

FOUNDATION_EXPORT NSData* _Nullable BlockchainAesDecrypt(NSData* _Nullable secret, NSData* _Nullable b, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSData* _Nullable BlockchainAesEncrypt(NSData* _Nullable secret, NSData* _Nullable plaintext, NSData* _Nullable nonce, NSError* _Nullable* _Nullable error);

// skipped function CKDPriv with unsupported parameter or return types


// skipped function CreateSolanaMasterKey with unsupported parameter or return types


// skipped function Derived with unsupported parameter or return types


FOUNDATION_EXPORT NSString* _Nonnull BlockchainExportEvmPrivateKey(NSString* _Nullable mnemonic, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainExportSolanaPrivateKey(NSString* _Nullable mnemonic, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateBitcoinSegwitAddress(NSString* _Nullable seed, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateBitcoinTaprootAddress(NSString* _Nullable seed, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateEthereumAddress(NSString* _Nullable seed, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateEvmAddressFromMnemonic(NSString* _Nullable mnemonic, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateEvmAddressFromPrivateKey(NSString* _Nullable privateKey, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateSolanaAddress(NSString* _Nullable seed, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateSolanaAddressFromMnemonic(NSString* _Nullable mnemonic, NSString* _Nullable path, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainGenerateSolanaAddressFromPrivateKey(NSString* _Nullable privateKey, NSError* _Nullable* _Nullable error);

FOUNDATION_EXPORT BOOL BlockchainIsMnemonicValid(NSString* _Nullable mnemonic);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainMnemonicChecksumWord(NSString* _Nullable words, long prefixLen);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainMnemonicToMasterKey(NSString* _Nullable mnemonic, NSError* _Nullable* _Nullable error);

/**
 * NewKeccakState creates a new KeccakState
 */
FOUNDATION_EXPORT id<BlockchainKeccakState> _Nullable BlockchainNewKeccakState(void);

FOUNDATION_EXPORT NSString* _Nonnull BlockchainNewMnemonic(NSData* _Nullable entropy, NSError* _Nullable* _Nullable error);

@class BlockchainKeccakState;

@interface BlockchainKeccakState : NSObject <goSeqRefInterface, BlockchainKeccakState> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (long)blockSize;
- (BOOL)read:(NSData* _Nullable)p0 ret0_:(long* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (void)reset;
- (long)size;
- (NSData* _Nullable)sum:(NSData* _Nullable)b;
- (BOOL)write:(NSData* _Nullable)p0 n:(long* _Nullable)n error:(NSError* _Nullable* _Nullable)error;
@end

#endif
